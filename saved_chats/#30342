USER: https://codeforces.com/contest/1375/problem/C

BOT: Thanks! Now could you provide a link to the editorial.



USER: https://codeforces.com/blog/entry/79731

BOT: Would you like hints to help you solve the problem or an interactive explanation of the editorial (hint/editorial)? 



USER: hint

BOT: What are you current thoughts on the problem? 



USER: add all the consecutive differences of array elements

BOT: Your thoughts are not in the editorial.



USER: take the difference between first and last element of array

BOT: Your thoughts are not in the editorial.



USER: check if first element is smaller than last element, if yes, then the answer should be yes

BOT: You are thinking in the right direction. If the first element is smaller than the last element, the answer should be yes. Would you like a larger hint?



USER: find the sum of consecutive differences of array elements, if the sum is positive, answer should be yes

BOT: Your thoughts are not in the editorial.



USER: can you explain the rest of the solution?

BOT: Sure, let's delve into the rest of the solution.

When the first element $a_1$ is smaller than the last element $a_n$, you can always reduce the array to a single element. Here's why:

1. **Find the smallest index $r$**: Start by finding the smallest index $r$ such that $a_1 < a_r$. This ensures that there is an element $a_r$ in the array that is greater than $a_1$.

2. **Remove elements**: Choose $a_r$ and the element immediately before $a_r$, and remove the element before $a_r$. This operation reduces the array size while maintaining the condition $a_1 < a_r$.

3. **Repeat the process**: Continue this process until $a_r$ becomes adjacent to $a_1$.

4. **Final removal**: Once $a_r$ is adjacent to $a_1$, choose $a_1$ and $a_r$, and remove $a_r$. This leaves $a_1$ as the only element in the array.

When $a_1 > a_n$, the situation is different:

1. **Non-decreasing leftmost element**: The leftmost element of the array will always be non-decreasing because if you want to remove the old leftmost element $a_1$, you need to pair it with $a_2$ where $a_2 > a_1$. This results in the new leftmost element being greater than the old one.

2. **Non-increasing rightmost element**: Similarly, the rightmost element will always be non-increasing because removing the old rightmost element requires pairing it with the element before it, which is smaller.

These observations make it impossible to reduce the array to a single element when $a_1 > a_n$.

Would you like any further elaboration on any part of this explanation?



USER: how does choosing a1 < ar lead to the solution of a1 , an being sufficient and necessary condition for answer to be 'YES'

BOT: Great question! Let's clarify why the condition $a_1 < a_n$ is both necessary and sufficient for the answer to be "YES".

### Sufficiency (Why $a_1 < a_n$ is enough):
1. **Initial Condition**: If $a_1 < a_n$, it means there is a way to start reducing the array while maintaining the possibility of further reductions.
2. **Reduction Process**: By always finding the smallest index $r$ such that $a_1 < a_r$, you ensure that you can always remove elements in pairs where one element is smaller than the other.
3. **Final Reduction**: This process continues until $a_r$ becomes adjacent to $a_1$. At this point, you can remove $a_r$ and be left with $a_1$.

### Necessity (Why $a_1 < a_n$ is required):
1. **Non-decreasing Leftmost Element**: If $a_1 > a_n$, the leftmost element of the array will always be non-decreasing. This is because you can only remove the leftmost element if the next element is larger, which means the new leftmost element will be larger than the old one.
2. **Non-increasing Rightmost Element**: Similarly, the rightmost element will always be non-increasing because you can only remove the rightmost element if the previous element is smaller, which means the new rightmost element will be smaller than the old one.
3. **Contradiction**: These two conditions (non-decreasing leftmost and non-increasing rightmost) create a contradiction when $a_1 > a_n$, making it impossible to reduce the array to a single element.

Thus, $a_1 < a_n$ is both a necessary and sufficient condition for being able to reduce the array to a single element. Would you like any further details on this?



